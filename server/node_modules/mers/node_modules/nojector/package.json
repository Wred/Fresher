{
  "name": "nojector",
  "version": "0.2.0",
  "description": "Node Parameter Injection",
  "main": "index.js",
  "scripts": {
    "test": "mocha ./tests"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jspears/nojector"
  },
  "keywords": [
    "Dependency Injection",
    "node",
    "mers",
    "express"
  ],
  "author": {
    "name": "Justin Spears"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/jspears/nojector/issues"
  },
  "homepage": "https://github.com/jspears/nojector",
  "dependencies": {
    "mpromise": "^0.5.5",
    "underscore": "^1.7.0"
  },
  "devDependencies": {
    "mocha": "^2.1.0",
    "should": "^4.5.0"
  },
  "readme": "#Nojector\nA small realtively simple way to do parameter injection in node. Mostly for\nweb applications.  It looks at the parameter names, and tries to resolve them\nwith a resolver.  Really take a look at (mers)[http://github.com/jspears/mers#develop] for\na better idea of why and how to use it.  The unit tests might give some ideas also.\n\n\nBuilt in resovlers:\n* query - query string values.\n* session - session values.\n* body - body values.\n* params - Parameters.\n* args - additional arguments.\n* require - requires a module.\n\n##Usage\n###Basic\n\n\n```\n        var conf = nojector({\n            //custom resolvers\n            resolvers: {\n                async: function (ctx, settings, pos, param) {\n                    var obj = {};\n                    //pos is the positional argument.\n                    obj[param] = ctx.args[pos];\n                    var p = promise();\n                    setTimeout(function () {\n                        p.resolve(null,obj);\n                    }, 100);\n                    return p;\n                }\n            }\n        });\n        //method you want to inject\n        var a = function (async$user) {\n            return async$user;\n        }\n        conf.resolve(a, {}, null, 2).then(function (val) {\n        //    val.should.have.property('user', 2);\n            done();\n        });\n```\n\n###Express context\n\n```\nvar a = {\n\n   stuff:function(session$user){\n//        do something with session$user;\n\n   }\n\n}\napp.get('/stuff', function(req,res,next){\n\nnojector.resolve(a.stuff, req).then(function(response){\n  //do something with response;\n  next();\n}, next);\n\n```\n\n##Navigation\n\n```\n\n\n```",
  "readmeFilename": "Readme.md",
  "_id": "nojector@0.2.0",
  "dist": {
    "shasum": "ac9368f5b218162fa352688f908f6367e5f0b7d9"
  },
  "_from": "nojector@^0.2.0",
  "_resolved": "https://registry.npmjs.org/nojector/-/nojector-0.2.0.tgz"
}
