{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/main.js","bundle.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"loadContentTree","rootPageID","contextNew","id","idStruct","structure","structures","get","pages","create","name","image","children","wait","success","model","parent","push","cbSave","err","console","error","tree","createNode","expandNode","selectNode","resp","Tree","domID","rootID","iconPath","onLoad","cb","getFetch","log","onClick","onDrop","target_id","old_parent_id","oldParent","_","without","onDropBefore","newParents","filter","page","contains","newParent","splice","indexOf","onRename","onContext","subs","map","icon","action","l_return","editNodeName","deleteNode","publications","Publications","Pages","Structures","window","onload","async","parallel","cbFetch","at"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var tree,\n\tpublications = new Publications,\n\tpages = new Pages,\n\tstructures = new Structures;\n\n\nwindow.onload = function () {\n\t// AM: NOTE: Backbone:\n\t// I'm going to load the initial data in a second call.\n\t// Really don't like the idea of loading it inlined\n\n\t// load publications and structures\n\tasync.parallel(\n\t\t[\n\t\tfunction (cb) { publications.cbFetch(cb); },\n\t\tfunction (cb) { structures.cbFetch(cb); }\n\t\t],\n\t\tfunction (err, results) {\n\t\t\tif (err)\n\t\t\t\treturn console.error(\"Unable to start: \"+ err);\n\n\t\t\t// start with first publication (we'll change this one we get cookies going)\n\t\t\tloadContentTree(publications.at(0).get(\"rootPage\"));\n\t\t});\n}\n\n\nfunction loadContentTree(rootPageID) {\n\t\n\tfunction contextNew(id, idStruct) {\t\n\t\tvar structure = structures.get(idStruct);\n\t\t\n\t\t// create page and save it on server\n\t\tpages.create(\n\t\t\t{\n\t\t\t\tname:structure.get(\"name\"),\n\t\t\t\timage:structure.get(\"image\"),\n\t\t\t\tchildren:[]\n\t\t\t},\n\t\t\t{\n\t\t\t\twait: true, // only add once we get a response\n\t\t\t\tsuccess:function (model, resp, options) {\n\t\t\t\t\t// now we can add the _id of the new page to the parent's children\n\t\t\t\t\tvar parent = pages.get(id);\n\t\t\t\t\tvar children = parent.get(\"children\");\n\t\t\t\t\tchildren.push(model.id);\n\t\t\t\t\tparent.cbSave({children:children}, function (err, response) {\n\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\treturn console.error(err);\n\n\t\t\t\t\t\t// update parent (to update children)\n\t\t\t\t\t\ttree.createNode(parent.id, parent.get(\"name\"), parent.get(\"image\"), parent.get(\"children\"));\n\n\t\t\t\t\t\t// add node\n\t\t\t\t\t\ttree.createNode(model.id, model.get(\"name\"), model.get(\"image\"), model.get(\"children\"));\n\n\t\t\t\t\t\t// make sure parent is expanded\n\t\t\t\t\t\ttree.expandNode(parent.id, true);\n\t\t\t\t\t\ttree.selectNode(model.id);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\terror:function (model, resp, options) {\n\t\t\t\t\tconsole.error(\"Couldn't create new page\");\n\t\t\t\t\tconsole.error(resp);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\ttree = Tree({\n\t\tdomID:\"tree\",\n\t\trootID:rootPageID,\n\t\ticonPath: \"images/icons/\",\n\t\tonLoad: function (id, cb) {\n\t\t\tpages.getFetch(id, function (err, model) {\n\t\t\t\tif (err)\n\t\t\t\t\treturn console.log(\"Couldn't load page: \"+ id);\n\n\t\t\t\tcb(null, model.get(\"name\"), model.get(\"image\"), model.get(\"children\"));\n\t\t\t});\n\t\t},\n\t\tonClick:function(id) {\n\t\t\tconsole.log(\"open page: \"+ id);\n\t\t},\n\t\tonDrop:function(id, target_id, old_parent_id, cb) {\n\t\t\tvar parent = pages.get(target_id),\n\t\t\t\toldParent = pages.get(old_parent_id);\n\n\t\t\t// remove from old parent\n\t\t\toldParent\n\t\t\t\t.cbSave({children:_.without(oldParent.get(\"children\"), id)}, function (err) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\treturn cb(\"Failed to save old parent: \"+ err);\n\n\t\t\t\t\t// now add node to new parent\n\t\t\t\t\tvar children = parent.get(\"children\");\n\t\t\t\t\tchildren.push(id);\n\n\t\t\t\t\tparent\n\t\t\t\t\t\t.cbSave({children: children}, function (err) {\n\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\treturn cb(\"Failed to save old parent:\"+ err);\n\n\t\t\t\t\t\t\t// success - update tree\n\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t},\n\t\tonDropBefore:function(id, target_id, old_parent_id, cb) {\n\t\t\tconsole.log(\"moving: \"+ id +\"\\n\\tprevious:\"+ target_id);\n\n\t\t\tvar oldParent = pages.get(old_parent_id);\n\n\t\t\t// remove from old parent\n\t\t\toldParent\n\t\t\t\t.cbSave({children:_.without(oldParent.get(\"children\"), id)}, function (err) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\treturn cb(\"Couldn't save old parent changes: \"+ err);\n\n\t\t\t\t\t// add it to new parent\n\t\t\t\t\t// first find the parent\n\t\t\t\t\tvar newParents = pages.filter(function (page) {\n\t\t\t\t\t\treturn _.contains(page.get(\"children\"), target_id);\n\t\t\t\t\t});\n\n\t\t\t\t\t// there should only be one new parent..\n\t\t\t\t\tif (newParents.length == 0) {\n\t\t\t\t\t\tconsole.error(\"No parent found for target.\");\n\t\t\t\t\t\t// can't continue\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newParents.length > 1) {\n\t\t\t\t\t\tconsole.error(\"Multiple parents found for target.\");\n\t\t\t\t\t}\n\n\t\t\t\t\tvar newParent = newParents[0],\n\t\t\t\t\t\tchildren = newParent.get(\"children\");\n\n\t\t\t\t\tchildren.splice(_.indexOf(children, target_id), 0, id);\n\n\t\t\t\t\tnewParent\n\t\t\t\t\t\t.cbSave({children:children}, function (err) {\n\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\treturn cb(\"Failed to save old parent: \"+ err);\n\n\t\t\t\t\t\t\t// success - update tree\n\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t},\n\t\tonRename:function(id, name) {\n\t\t\tpages.get(id).cbSave({name:name}, function (err, res) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn console.error(err);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tonContext:function(id, cb) {\n\t\t\tif (id) {\n\t\t\t\t// add structures to new context menu\n\t\t\t\tvar subs = structures.map(function (structure) {\n\t\t\t\t\treturn {name:structure.get(\"name\"), icon:structure.get(\"image\"), action: function (id) {contextNew(id, structure.id)}};\n\t\t\t\t});\n\n\t\t\t\tvar l_return = [\n\t\t\t\t\t{name:'Rename', action:function (id) {\n\t\t\t\t\t\ttree.editNodeName(id);\n\t\t\t\t\t}},\n\t\t\t\t\t{name:'Preview', action:function (id) {\n\t\t\t\t\t\tconsole.log(\"Preview page: \"+ id);\n\t\t\t\t\t}},\n\t\t\t\t\t{name:'Publish', action:function (id) {\n\t\t\t\t\t\tconsole.log(\"Publish page: \"+ id);\n\t\t\t\t\t}},\n\t\t\t\t\t{name:'New...', subs:subs},\n\t\t\t\t\t{name:'Delete',action:function (id) {\n\t\t\t\t\t\tconsole.log(\"Delete page: \"+ id);\n\t\t\t\t\t\ttree.deleteNode(id);\n\t\t\t\t\t}},\n\t\t\t\t\t{name:'Properties',action:function (id) {\n\t\t\t\t\t\tconsole.log(\"Page properties: \"+ id);\n\t\t\t\t\t}}\n\t\t\t\t];\n\n\t\t\t\treturn cb (null, l_return);\n\t\t\t}\n\n\t\t\treturn cb(null, []);\n\t\t}\n\t});\n\n}",null],"sourceRoot":"/source/"}